import java.lang.reflect.Field

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        applicationId "com.github.pgycode.weibo.home"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

android {
    resourcePrefix 'home_'
    aaptOptions {
        additionalParameters '--package-id', '0x80'
    }
}

android.applicationVariants.all { def variant ->
    //支持2.5.0+ ~ 3.2.0+，支持传递依赖
    def prepareBuildTask = project.tasks.findByName("pre${variant.getName().capitalize()}Build")
    if (prepareBuildTask) {
        boolean needRedirectAction = false
        prepareBuildTask.actions.iterator().with { actionsIterator ->
            actionsIterator.each { action ->
                if (action.getActionClassName().contains("AppPreBuildTask")) {
                    actionsIterator.remove()
                    needRedirectAction = true
                }
            }
        }
        if (needRedirectAction) {
            prepareBuildTask.doLast {
                def compileManifests = null
                def runtimeManifests = null
                Class appPreBuildTaskClass = Class.forName("com.android.build.gradle.internal.tasks.AppPreBuildTask")
                try {
                    //3.0.0+
                    Field compileManifestsField = appPreBuildTaskClass.getDeclaredField("compileManifests")
                    Field runtimeManifestsField = appPreBuildTaskClass.getDeclaredField("runtimeManifests")
                    compileManifestsField.setAccessible(true)
                    runtimeManifestsField.setAccessible(true)
                    compileManifests = compileManifestsField.get(prepareBuildTask)
                    runtimeManifests = runtimeManifestsField.get(prepareBuildTask)
                } catch (Exception e) {
                    try {
                        //2.5.0+
                        Field variantScopeField = appPreBuildTaskClass.getDeclaredField("variantScope")
                        variantScopeField.setAccessible(true)
                        def variantScope = variantScopeField.get(prepareBuildTask)
                        //noinspection UnnecessaryQualifiedReference
                        compileManifests = variantScope.getArtifactCollection(com.android.build.gradle.internal.publishing.AndroidArtifacts.ConsumedConfigType.COMPILE_CLASSPATH, com.android.build.gradle.internal.publishing.AndroidArtifacts.ArtifactScope.ALL, com.android.build.gradle.internal.publishing.AndroidArtifacts.ArtifactType.MANIFEST)
                        runtimeManifests = variantScope.getArtifactCollection(com.android.build.gradle.internal.publishing.AndroidArtifacts.ConsumedConfigType.RUNTIME_CLASSPATH, com.android.build.gradle.internal.publishing.AndroidArtifacts.ArtifactScope.ALL, com.android.build.gradle.internal.publishing.AndroidArtifacts.ArtifactType.MANIFEST)
                    } catch (Exception e1) {
                    }
                }
                try {
                    Set<ResolvedArtifactResult> compileArtifacts = compileManifests.getArtifacts()
                    Set<ResolvedArtifactResult> runtimeArtifacts = runtimeManifests.getArtifacts()

                    Map<String, String> runtimeIds = new HashMap<>(runtimeArtifacts.size())

                    def handleArtifact = { id, consumer ->
                        if (id instanceof ProjectComponentIdentifier) {
                            consumer(((ProjectComponentIdentifier) id).getProjectPath().intern(), "")
                        } else if (id instanceof ModuleComponentIdentifier) {
                            ModuleComponentIdentifier moduleComponentId = (ModuleComponentIdentifier) id
                            consumer(
                                    moduleComponentId.getGroup() + ":" + moduleComponentId.getModule(),
                                    moduleComponentId.getVersion())
                        } else {
                            project.getLogger()
                                    .warn(
                                            "Unknown ComponentIdentifier type: "
                                                    + id.getClass().getCanonicalName())
                        }
                    }

                    runtimeArtifacts.each { def artifact ->
                        def runtimeId = artifact.getId().getComponentIdentifier()
                        def putMap = { def key, def value ->
                            runtimeIds.put(key, value)
                        }
                        handleArtifact(runtimeId, putMap)
                    }

                    compileArtifacts.each { def artifact ->
                        final ComponentIdentifier compileId = artifact.getId().getComponentIdentifier()
                        def checkCompile = { def key, def value ->
                            String runtimeVersion = runtimeIds.get(key)
                            if (runtimeVersion == null) {
                                String display = compileId.getDisplayName()
                                project.logger.info(
                                        "[providedAar] WARNING: providedAar has been enabled in com.android.application you can ignore 'Android dependency '"
                                                + display
                                                + "' is set to compileOnly/provided which is not supported'")
                            } else if (!runtimeVersion.isEmpty()) {
                                // compare versions.
                                if (!runtimeVersion.equals(value)) {
                                    throw new RuntimeException(
                                            String.format(
                                                    "Android dependency '%s' has different version for the compile (%s) and runtime (%s) classpath. You should manually set the same version via DependencyResolution",
                                                    key, value, runtimeVersion));
                                }
                            }
                        }
                        handleArtifact(compileId, checkCompile)
                    }
                } catch (Exception e) {
                    e.printStackTrace()
                }
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':modules:common')
}
